import tkinter as tk
from tkinter import messagebox

# --- Main Application Class ---
class App(tk.Tk):
    def __init__(self):
        super().__init__()

        # --- Hardcoded Login Details (for demonstration) ---
        # In a real application, this would come from a database or secure storage.
        self.active_login_details = {
            "admin": "password123",
            "user": "qwerty",
            "test": "testing"
        }

        # --- Window Configuration ---
        self.title("Login Application")
        self.geometry("400x500")
        self.configure(bg="#F0F0F0") # Light grey background
        self.resizable(False, False)

        # --- Container Frame ---
        # This frame will hold either the login page or the dashboard page
        self.container = tk.Frame(self, bg="#F0F0F0")
        self.container.pack(fill="both", expand=True)

        self.frames = {}
        # Create and store the login and dashboard frames
        for F in (LoginPage, DashboardPage):
            page_name = F.__name__
            frame = F(parent=self.container, controller=self)
            self.frames[page_name] = frame
            # Place the frame in the container, but it won't be visible yet
            frame.grid(row=0, column=0, sticky="nsew")

        # Show the initial page
        self.show_frame("LoginPage")

    def show_frame(self, page_name, username=None):
        """Raises the specified frame to the top."""
        frame = self.frames[page_name]
        if username and page_name == "DashboardPage":
            # If we are showing the dashboard, pass the username to it
            frame.set_welcome_message(username)
        frame.tkraise()

# --- Login Page Class ---
class LoginPage(tk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent, bg="#F0F0F0")
        self.controller = controller

        # --- Styling ---
        font_header = ("Arial", 24, "bold")
        font_label = ("Arial", 12)
        font_entry = ("Arial", 12)
        font_button = ("Arial", 12, "bold")
        pad_x = 20
        pad_y = 10

        # --- Page Layout ---
        self.grid_rowconfigure(0, weight=1)
        self.grid_rowconfigure(5, weight=1)
        self.grid_columnconfigure(0, weight=1)
        self.grid_columnconfigure(2, weight=1)

        # --- Widgets ---
        # Header Label
        header_label = tk.Label(self, text="User Login", font=font_header, bg="#F0F0F0", fg="#333")
        header_label.grid(row=0, column=1, pady=(pad_y * 2, pad_y * 3), sticky="s")

        # Username Label and Entry
        username_label = tk.Label(self, text="Username:", font=font_label, bg="#F0F0F0")
        username_label.grid(row=1, column=1, sticky="w", padx=pad_x)
        self.username_entry = tk.Entry(self, font=font_entry, width=25, relief="solid", borderwidth=1)
        self.username_entry.grid(row=2, column=1, padx=pad_x, pady=(0, pad_y))

        # Password Label and Entry
        password_label = tk.Label(self, text="Password:", font=font_label, bg="#F0F0F0")
        password_label.grid(row=3, column=1, sticky="w", padx=pad_x)
        self.password_entry = tk.Entry(self, font=font_entry, show="*", width=25, relief="solid", borderwidth=1)
        self.password_entry.grid(row=4, column=1, padx=pad_x, pady=(0, pad_y * 2))

        # Login Button
        login_button = tk.Button(self, text="Login", font=font_button,
                                 command=self.check_credentials,
                                 bg="#007BFF", fg="white", relief="flat",
                                 activebackground="#0056b3", activeforeground="white",
                                 width=22)
        login_button.grid(row=5, column=1, pady=(pad_y, pad_y*3), sticky="n")

    def check_credentials(self):
        """Validates the entered username and password."""
        username = self.username_entry.get()
        password = self.password_entry.get()

        # Check if the username exists and the password is correct
        if username in self.controller.active_login_details and self.controller.active_login_details[username] == password:
            # Clear entry fields after successful login
            self.username_entry.delete(0, tk.END)
            self.password_entry.delete(0, tk.END)
            # Switch to the dashboard page
            self.controller.show_frame("DashboardPage", username=username)
        else:
            messagebox.showerror("Login Failed", "Invalid username or password.")
            # Clear the password entry for security
            self.password_entry.delete(0, tk.END)

# --- Dashboard Page Class ---
class DashboardPage(tk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent, bg="#F0F0F0")
        self.controller = controller

        # --- Styling ---
        font_header = ("Arial", 24, "bold")
        font_info = ("Arial", 12)
        font_button = ("Arial", 12, "bold")
        pad_x = 20
        pad_y = 10

        # --- Page Layout ---
        self.grid_columnconfigure(0, weight=1)

        # --- Widgets ---
        self.welcome_label = tk.Label(self, text="", font=font_header, bg="#F0F0F0", fg="#333")
        self.welcome_label.grid(row=0, column=0, pady=(40, 20), padx=pad_x)

        # Placeholder info text
        info_text = (
            "This is your personal dashboard.\n\n"
            "Here you can manage your settings, view your activity,\n"
            "and access various features of the application."
        )
        info_label = tk.Label(self, text=info_text, font=font_info, bg="#F0F0F0", justify="center")
        info_label.grid(row=1, column=0, pady=pad_y, padx=pad_x)
        
        # Placeholder for dashboard content
        content_frame = tk.Frame(self, bg="#FFFFFF", relief="sunken", borderwidth=1)
        content_frame.grid(row=2, column=0, padx=pad_x, pady=pad_y*2, sticky="ew")
        content_label = tk.Label(content_frame, text="[Dashboard content, charts, or data would go here]",
                                 font=font_info, bg="#FFFFFF", fg="#666")
        content_label.pack(padx=20, pady=40)


        # Logout Button
        logout_button = tk.Button(self, text="Logout", font=font_button,
                                  command=self.logout,
                                  bg="#DC3545", fg="white", relief="flat",
                                  activebackground="#c82333", activeforeground="white")
        logout_button.grid(row=3, column=0, pady=(20, 40), padx=pad_x)

    def set_welcome_message(self, username):
        """Updates the welcome message with the logged-in user's name."""
        self.welcome_label.config(text=f"Welcome, {username.capitalize()}!")

    def logout(self):
        """Logs the user out and returns to the LoginPage."""
        self.controller.show_frame("LoginPage")


# --- Main execution block ---
if __name__ == "__main__":
    app = App()
    app.mainloop()

